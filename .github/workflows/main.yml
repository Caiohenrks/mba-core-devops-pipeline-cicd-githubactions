name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

  build:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: |
          docker build -t ${{ github.event.repository.name }} ./data_app

  quality-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: "https://sonarcloud.io/"
          SONAR_TOKEN: ${{ secrets.SONARQUBE }}
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="$SONAR_HOST_URL" \
            -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{ github.event.repository.name }} -Dsonar.organization=caiohenrks -Dsonar.languages=js,Docker,PHP -Dsonar.projectVersion=V${{ github.run_number }}" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Security Image Scan
        run: |
          max_attempts=5
          attempt=1

          while (( attempt <= max_attempts )); do
            echo "Attempt $attempt of $max_attempts..."
            if docker run --rm aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL --format json ${{ github.event.repository.name }}; then
              echo "Trivy scan completed successfully."
              break
            else
              echo "Attempt $attempt failed. Retrying..."
              ((attempt++))
              sleep 10 
            fi
          done

          if (( attempt > max_attempts )); then
            echo "Failed after $max_attempts attempts."
            exit 1
          fi

  push-image:
    runs-on: ubuntu-latest
    needs: [build, security-scan]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Push to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag ${{ github.event.repository.name }} $DOCKER_USERNAME/${{ github.event.repository.name }}:latest
          docker push $DOCKER_USERNAME/${{ github.event.repository.name }}:latest
          docker tag ${{ github.event.repository.name }} $DOCKER_USERNAME/${{ github.event.repository.name }}:V${{ github.run_number }}
          docker push $DOCKER_USERNAME/${{ github.event.repository.name }}:V${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: push-image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Deploy Application
        run: |
          docker-compose -f ./data_app/docker-compose.yml up -d

      - name: Smoke Test
        run: |
          docker run --rm -v ./postman:/etc/newman -t postman/newman run /etc/newman/${{ github.event.repository.name }}.json -r cli

  upload:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Upload Artifacts
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          zip -r ${{ github.event.repository.name }}_${{ github.run_number }}.zip artifacts
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ${{ github.event.repository.name }}_${{ github.run_number }}.zip http://192.168.50.30:8081/repository/jenkins_artifacts/${{ github.event.repository.name }}_${{ github.run_number }}.zip
