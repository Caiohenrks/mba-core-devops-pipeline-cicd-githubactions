name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

  setup-buildx:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Switch to docker-container driver
        run: |
          docker buildx create --name mybuilder --use
          docker buildx inspect --bootstrap

  install-dependencies:
    runs-on: ubuntu-latest
    needs: [checkout]
    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git docker-compose

  sonar-analysis:
    runs-on: ubuntu-latest
    needs: [checkout, install-dependencies]
    steps:
      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: "https://sonarcloud.io/"
          SONAR_TOKEN: ${{ secrets.SONARQUBE }}
        run: |
          docker run --rm \
            -e SONAR_HOST_URL="$SONAR_HOST_URL" \
            -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{ github.event.repository.name }} -Dsonar.organization=caiohenrks -Dsonar.languages=js,Docker,PHP -Dsonar.projectVersion=V${{ github.run_number }}" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -v "$(pwd):/usr/src" \
            sonarsource/sonar-scanner-cli

  build-docker-image:
    runs-on: ubuntu-latest
    needs: setup-buildx
    steps:
      - name: Build Docker Image
        run: |
          docker compose -f ./data_app/docker-compose.yml build
          docker build -t ${{ github.event.repository.name }} -f ./data_app/Dockerfile ./data_app


  security-scan:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Security Image Scan
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:${{ github.workspace }} \
            -w ${{ github.workspace }} \
            aquasec/trivy image --exit-code 0 --severity HIGH,CRITICAL \
            --format json \
            --output trivy-report.html ${{ github.event.repository.name }}

  push-docker-hub:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Push to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag ${{ github.event.repository.name }} $DOCKER_USERNAME/${{ github.event.repository.name }}:latest
          docker push $DOCKER_USERNAME/${{ github.event.repository.name }}:latest
          docker tag ${{ github.event.repository.name }} $DOCKER_USERNAME/${{ github.event.repository.name }}:V${{ github.run_number }}
          docker push $DOCKER_USERNAME/${{ github.event.repository.name }}:V${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: push-docker-hub
    steps:
      - name: Deploy Application
        run: |
          docker-compose -f ./data_app/docker-compose.yml up -d

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Smoke Test
        run: |
          docker run --rm -v ./postman:/etc/newman -t postman/newman run /etc/newman/${{ github.event.repository.name }}.json -r cli

  upload-artifacts:
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - name: Upload Artifacts
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          zip -r ${{ github.event.repository.name }}_${{ github.run_number }}.zip artifacts
          curl -v -u $NEXUS_USERNAME:$NEXUS_PASSWORD --upload-file ${{ github.event.repository.name }}_${{ github.run_number }}.zip http://192.168.50.30:8081/repository/jenkins_artifacts/${{ github.event.repository.name }}_${{ github.run_number }}.zip
